#xlab = "Number of years using facebook",
#ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(11, 100, 10), limits = c(11, 100))
qplot(x = age, data = pf, binwidth = .25,
#xlab = "Number of years using facebook",
#ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(11, 100, 9), limits = c(11, 100))
qplot(x = age, data = pf, binwidth = .25,
#xlab = "Number of years using facebook",
#ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(11, 100, 10), limits = c(11, 100))
summary(pf$age)
qplot(x = age, data = pf, binwidth = .25,
#xlab = "Number of years using facebook",
#ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(11, 100, 10), limits = c(11, 100))
summary(pf$age)
qplot(x = age, data = pf, binwidth = .25,
#xlab = "Number of years using facebook",
#ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(13, 113, 10), limits = c(13, 113))
qplot(x = friend_count, data = pf)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count))
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count+1))
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count)) # to avoid zero, when
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
summary(sqrt(pf$friend_count + 1))
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
getwd()
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
# read.delim('pseudo_facebook.tsv') unction defaults to the tab character as the separator between values and the period as the decimal character.
install.packages('ggplot2')
library(ggplot2)
names(pf) #column names
qplot(x = dob_day, data = pf) +
scale_x_continuous(breaks=1:31)
#Run the following code in R to get other themes.
install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
qplot(x = dob_day, data = pf) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month, ncol = 3)
# facet_wrap(~variable_to_facet_over)
# facet_grid(var_to_split_in_vertical_direction ~ var_to_split_in_horizontal) # more useful when you are faceting over two or more variables
qplot(x = friend_count, data = pf)
#idem
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 100))
qplot(x = friend_count, data = pf, xlim = c(0, 1000))
#idem
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000))
# What code would you add to create a facet the histogram by gender?
# Add it to the code below.
qplot(x = friend_count, data = pf, binwidth = 50) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 100) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
table(pf$gender)
by(pf$friend_count, pf$gender, summary)
#by(variable, categorical variable, function)
# antiguedad
qplot(x = tenure, data = pf, binwidth = 30,
color = I('black'), fill = I('#099DD9'))
# see ggplot theme documentation for color and fill
# tenure is in days
# similar to qplot(x = tenure, data = pf, binwidth = 365... but does not work well with breaks and limits...
# use .25 o 1
qplot(x = tenure/365, data = pf, binwidth = .25,
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7))
qplot(x = tenure/365, data = pf, binwidth = .25,
xlab = "Number of years using facebook",
ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7))
summary(pf$age)
qplot(x = age, data = pf, binwidth = .25,
#xlab = "Number of years using facebook",
#ylab = "Numer of users in sample",
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(13, 113, 10), limits = c(13, 113))
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = log10(friend_count), data = pf)
p3 = qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=3)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = friend_count, data = log10(pf))
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = log10(friend_count), data = pf)
p3 = qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=3)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = friend_count, data = pf) + scale_x_log10()
p3 = qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=3)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = log10(friend_count + 1, data = pf)
p3 = qplot(x = sqrt(friend_count), data = pf)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = log10(friend_count + 1), data = pf)
p3 = qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=3)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 = qplot(x = friend_count, data = pf)
p2 = qplot(x = log10(friend_count + 1), data = pf)
p3 = qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=1)
p1 <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol = 1)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 <- qplot(x = friend_count, data = pf)
p2 <- qplot(x = log10(friend_count + 1), data = pf)
p3 <- qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=1)
logScale <- qplot(x = friend_count, data = pf)
countScale <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
grid.arrange(logScale, countScale, ncol = 2)
logScale <- qplot(x = log10(friend_count), data = pf)
countScale <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
grid.arrange(logScale, countScale, ncol = 2)
logScale <- qplot(x = log10(friend_count), data = pf)
countScale <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
grid.arrange(logScale, countScale, ncol = 2)
# difference is in the x scale labeling
qplot(x = friend_count, data = pf) +
scale_x_log10()
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 100) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 100, geom = 'freqpoly') +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 100, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 100, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# but who has more friends on average, we need proportions
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
binwidth = 100, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 100, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# but who has more friends on average, we need proportions
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend count',
ylab = 'proportion of users with that friend count',
binwidth = 100, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# but who has more friends on average, we need proportions
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend count',
ylab = 'proportion of users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# but who has more friends on average, we need proportions
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend count',
ylab = 'proportion of users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(250, 1000),
breaks = seq(250, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# but who has more friends on average, we need proportions
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend count',
ylab = 'proportion of users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# but who has more friends on average, we need proportions
qplot(x = friend_count, y = ..count../sum(..count..),
data = subset(pf, !is.na(gender)),
xlab = 'Friend count',
ylab = 'proportion of users with that friend count',
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
# equivalent
ggplot(aes(x = friend_count, y = ..count../sum(..count..)),
data = subset(pf, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Friend Count') +
ylab('Proportion of users with that friend count')
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
binwidth = 10, geom = 'freqpoly', color = gender) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50))
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender)
#+
#  scale_x_continuous(limits = c(0, 1000),
#                     breaks = seq(0, 1000, 50))
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_log10()
#  scale_x_continuous(limits = c(0, 1000),
#                     breaks = seq(0, 1000, 50))
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_log10()
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_log10()
by(pf$www_likes, pf$gender, summary)
qplot(x = www_likes, data = subset(pf, !is.na(gender)),
geom = 'freqpoly', color = gender) +
scale_x_log10()
by(pf$www_likes, pf$gender, sum)
p1 <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol = 1)
p1 <- ggplot(aes(x = friend_count), data = pf)
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol = 1)
p1 <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
p2 <- p1 + scale_x_log10()
p3 <- p1 + scale_x_sqrt()
grid.arrange(p1, p2, p3, ncol = 1)
qplot(x = friend_count, data = pf)
summary(pf$friend_count)
summary(log10(pf$friend_count + 1)) # +1 to avoid zero, when calculating the mean, result negative infinitive
# another transformation
summary(sqrt(pf$friend_count))
install.packages('gridExtra')
library('gridExtra')
p1 <- qplot(x = friend_count, data = pf)
p2 <- qplot(x = log10(friend_count + 1), data = pf)
p3 <- qplot(x = sqrt(friend_count), data = pf)
grid.arrange(p1, p2, p3, ncol=1)
logScale <- qplot(x = log10(friend_count), data = pf)
countScale <- ggplot(aes(x = friend_count), data = pf) + geom_histogram() + scale_x_log10()
grid.arrange(logScale, countScale, ncol = 2)
# difference is in the x scale labeling
qplot(x = friend_count, data = pf) +
scale_x_log10()
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000,50))+
facet_wrap(gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000,50))+
facet_wrap(~gender)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot')
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_log10()
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000))
# alternative
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(limits = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000))
# alternative
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(limits = c(0, 1000))
#better way
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 100))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000))
# alternative
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(limits = c(0, 1000))
#better way
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot')
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot', ylim = c(0, 1000))
# alternative
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
scale_y_continuous(limits = c(0, 1000))
#better way
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 1000))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 250))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 250))
by(pf$friend_count, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian()
by(pf$friendships_initiated, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 250))
by(pf$friendships_initiated, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 150))
by(pf$friendships_initiated, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0, 150))
by(pf$friendships_initiated, pf$gender, summary)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
summary(pf$mobile_check_in)
sum(pf$mobile_check_in == 1) / length(pf$mobile_check_in)
getwd()
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
# read.delim('pseudo_facebook.tsv') unction defaults to the tab character as the separator between values and the period as the decimal character.
install.packages('ggplot2')
library(ggplot2)
names(pf) #column names
qplot(x = dob_day, data = pf) +
scale_x_continuous(breaks=1:31)
#Run the following code in R to get other themes.
install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
qplot(x = dob_day, data = pf) +
scale_x_continuous(breaks = 1:31) +
facet_wrap(~dob_month, ncol = 3)
# facet_wrap(~variable_to_facet_over)
# facet_grid(var_to_split_in_vertical_direction ~ var_to_split_in_horizontal) # more useful when you are faceting over two or more variables
qplot(x = friend_count, data = pf)
#idem
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 100))
qplot(x = friend_count, data = pf, xlim = c(0, 1000))
#idem
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0, 1000))
# What code would you add to create a facet the histogram by gender?
# Add it to the code below.
qplot(x = friend_count, data = pf, binwidth = 50) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 100) +
scale_x_continuous(limits = c(0, 1000),
breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
table(pf$gender)
by(pf$friend_count, pf$gender, summary)
#by(variable, categorical variable, function)
# antiguedad
qplot(x = tenure, data = pf, binwidth = 30,
color = I('black'), fill = I('#099DD9'))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
#Run the following code in R to get other themes.
install.packages('ggthemes', dependencies = TRUE)
library(ggthemes)
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
p1 <- ggplot(aes(x = friend_count), data = pf) + geom_histogram()
