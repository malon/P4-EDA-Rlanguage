# load library
library(devtools)
chooseCRANmirror(graphics=FALSE, ind=1)
# DEVTOOLS contains basic functions in R
# install library
install.packages('devtools')
# load library
library(devtools)
chooseCRANmirror(graphics=FALSE, ind=1)
# DEVTOOLS contains basic functions in R
# install library
install.packages('devtools')
# load library
library(devtools)
# This is the R library to access Numbers for development
#install_github('arcuellar88/iadbstats')
install_github('malon/Libreria-R-Numeros-para-el-Desarrollo')
library('iadbstats')
get_path()
data <- iadbstats(country="ARG,COL",frequency="year",indicatorcode="SOC_050")
ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName, group = CountryTableName)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
ggtitle('% house holds economically headed by females') +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
# GGPLOT will be used to create graphs
install.packages('ggplot2')
library(ggplot2)
data <- iadbstats(country="ARG,COL",frequency="year",indicatorcode="SOC_050")
ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName, group = CountryTableName)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
ggtitle('% house holds economically headed by females') +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
chooseCRANmirror(graphics=FALSE, ind=1)
# DEVTOOLS contains basic functions in R
# install library
install.packages('devtools')
# load library
library(devtools)
# GGPLOT will be used to create graphs
install.packages('ggplot2')
library(ggplot2)
# This is the R library to access Numbers for development
#install_github('arcuellar88/iadbstats')
install_github('EL-BID/Libreria-R-Numeros-para-el-Desarrollo')
library('iadbstats')
chooseCRANmirror(graphics=FALSE, ind=1)
# DEVTOOLS contains basic functions in R
# install library
install.packages('devtools')
# load library
library(devtools)
# GGPLOT will be used to create graphs
install.packages('ggplot2')
library(ggplot2)
# This is the R library to access Numbers for development
#install_github('arcuellar88/iadbstats')
install_github('EL-BID/Libreria-R-Numeros-para-el-Desarrollo')
library('iadbstats')
# This is a comment, anything written after a numeral symbol (#) insider a "Code chunk" will not be executed.
chooseCRANmirror(graphics=FALSE, ind=1)
# DEVTOOLS contains basic functions in R
# install library
install.packages('devtools')
# load library
library(devtools)
# GGPLOT will be used to create graphs
install.packages('ggplot2')
library(ggplot2)
# This is the R library to access Numbers for development
install_github('arcuellar88/iadbstats')
#install_github('EL-BID/Libreria-R-Numeros-para-el-Desarrollo')
library('iadbstats')
# This is a comment, anything written after a numeral symbol (#) insider a "Code chunk" will not be executed.
chooseCRANmirror(graphics=FALSE, ind=1)
# DEVTOOLS contains basic functions in R
# install library
install.packages('devtools')
# load library
library(devtools)
# GGPLOT will be used to create graphs
install.packages('ggplot2')
library(ggplot2)
# This is the R library to access Numbers for development
#install_github('arcuellar88/iadbstats')
install_github('EL-BID/Libreria-R-Numeros-para-el-Desarrollo')
library('iadbstats')
get_path()
data <- iadbstats(country="ARG,COL",frequency="year",indicatorcode="SOC_050")
ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName, group = CountryTableName)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
ggtitle('% house holds economically headed by females') +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
data <- iadbstats(country="ARG,COL",frequency="year",indicatorcode="SOC_050")
ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName, group = CountryTableName)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
ggtitle('% house holds economically headed by females') +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
# saving the response from the API in the meta_ind object
meta_ind <- iadbmsearch(value='All')
# Note: This Code chunk uses results="hide" (see it in RStudio) because we doesn´t want these results in our
# final file when we create it, the output will have too many columns to be presented in the file
# Inspecting the first six lines of the object meta_ind (with the "head" command)
head(meta_ind)
View(meta_ind)
data <- iadbstats(country="ARG,COL",frequency="year",indicatorcode="SOC_050")
ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName, group = CountryTableName)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
ggtitle('% house holds economically headed by females') +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
# Using the class and nrow commands
class(meta_ind)
nrow(meta_ind)
# We use the symbol $ to acces a column of the dataframe
topics <- meta_ind$TopicName
# With the command unique we just see the different values in the column topics
unique(topics)
# We are selecting the rows where the TopicName is Economy, notice the comma afterwards meaning we ar selecting all the columns for all the rows that fulfill this condition.
economy <- meta_ind[meta_ind$TopicName == "Economy", ]
nrow(economy)
# First, we need to create the filter, searching for those keywords in the column IndicatorName.
# We add ignore.case so we can search for women or Women indistinctly.
gender_filter <- grepl(pattern = "women|male", meta_ind$IndicatorName, ignore.case = TRUE)
# The filter returns the rows with matching conditions,
# lets see the first elements of the filter with the command head
head(gender_filter)
library(dplyr)
# We create a new DataFrame meta_ind_gender applying the filter we created to the original one
meta_ind_gender <- filter(meta_ind, boolean_filter)
library(dplyr)
# We create a new DataFrame meta_ind_gender applying the filter we created to the original one
meta_ind_gender <- filter(meta_ind, gender_filter)
# How many lines has the new table?
# Remember that you can check the size of the new object also in the Environment tab on the upper right corner
nrow(meta_ind_gender)
View(meta_ind_gender)
?group_by
?summaries
# We use the group_by command (from dplyr library) to create the grouped object
grouped <- group_by(meta_ind_gender,meta_ind_gender$SubTopicName)
# Summarise (from dplyr library) reduces multiple values down to a single value,
# it is typically used on grouped data
summarise(grouped,   n = n())
View(meta_ind_gender)
# As we´ve seen before we select all the lines that contain "Education"  in the column "SubTopicName".
# In this case we only want two columns IndicatorCode and IndicatorName so we indicate that after the comma.
meta_ind_g_edu <- meta_ind_gender[meta_ind_gender$SubTopicName == "Education", c("IndicatorCode", "IndicatorName")]
# As we´ve seen before we select all the lines that contain "Education"  in the column "SubTopicName".
# In this case we only want two columns IndicatorCode and IndicatorName so we indicate that after the comma.
meta_ind_g_edu <- meta_ind_gender[meta_ind_gender$SubTopicName == "Education", c("IndicatorCode", "IndicatorName")]
# We do the same for "Labor Market" SubtopicName
meta_ind_g_labo <- meta_ind_gender[meta_ind_gender$SubTopicName == "Labor Market", c("IndicatorCode", "IndicatorName")]
View(meta_ind_g_edu)
View(meta_ind_g_labo)
# As we´ve seen before we select all the lines that contain "Education"  in the column "SubTopicName".
# In this case we only want two columns IndicatorCode and IndicatorName so we indicate that after the comma.
meta_ind_g_edu <- meta_ind_gender[meta_ind_gender$SubTopicName == "Education", c("IndicatorCode", "IndicatorName")]
head(meta_ind_g_edu)
# We do the same for "Labor Market" SubtopicName
meta_ind_g_labo <- meta_ind_gender[meta_ind_gender$SubTopicName == "Labor Market", c("IndicatorCode", "IndicatorName")]
head(meta_ind_g_labo)
# We create and apply a filter like before
filter_edu <- grepl(pattern = "15-64 age", meta_ind_g_edu$IndicatorName)
filter(meta_ind_g_edu, filter_edu)
#This is a more complicated filter using regular expressions, because if we use the 15-64 it returns too many values
filter_labo <- grepl(pattern = "employment rate, [a-z]*male, no quint data, 15-64", meta_ind_g_labo$IndicatorName, ignore.case = TRUE)
filter(meta_ind_g_labo, filter_labo)
# Vector with indicators description
ind_vector = c("Female Employment Rate", "Male Employment Rate",
"% Female completing prim school",
"% Male completing prim school")
# Names of the vectors so we can access the description easily
names(ind_vector) = c("SOC_1127", "SOC_2683", "SOC_1328", "SOC_686")
ind_vector["SOC_1127"]
#Download indicator data for a vector of indicators and all the countries
ind_data<-iadbstats.list(indicatorCodes = names(ind_vector))
#Select columns
#ind2_data <-select(ind2, -CountryTableName, -IndicatorName, -SubTopicName , -Quarter, -Month, -AggregationLevel, -UOM, -TopicName)
work_data <- select(ind_data, CountryCode, IndicatorCode, Year, AggregatedValue, IndicatorName)
work_data2 <- ind_data[c("CountryCode", "IndicatorCode", "Year", "AggregatedValue", "IndicatorName")]
head(work_data)
unique(work_data$IndicatorCode)
unique(work_data$CountryCode)
View(work_data)
View(work_data2)
View(work_data2)
# Vector with indicators description
ind_vector <- c("Female Employment Rate", "Male Employment Rate",
"% Female completing prim school",
"% Male completing prim school")
# Names of the vectors so we can access the description easily
names(ind_vector) <- c("SOC_1127", "SOC_2683", "SOC_1328", "SOC_686")
# Download indicator data for a vector of indicators and all the countries
ind_data < -iadbstats.list(indicatorCodes = names(ind_vector))
# Download indicator data for a vector of indicators and all the countries
ind_data <- iadbstats.list(indicatorCodes = names(ind_vector))
# Select columns just the columns we are interested in
work_data <- ind_data[c("CountryCode", "IndicatorCode", "Year", "AggregatedValue", "IndicatorName")]
head(work_data)
unique(work_data$IndicatorCode)
unique(work_data$CountryCode)
#ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName)) + geom_point() +   xlab('Year') + ylab('% house holds economically headed by females')
#L = (ind2_data$CountryCode == 'GTM' | "URY" | "ECU") & (ind2_data$IndicatorCode == "SOC_1328")
#head(L)
subset1 <- subset(work_data, IndicatorCode == "SOC_1328" )
#& (CountryCode == 'GTM' | CountryCode == 'URY' | CountryCode == 'ECU' | CountryCode == 'PAN') )
head(subset1)
#ggplot(ind2_data[L,] , aes(x=Year, y=AggregatedValue, color=IndicatorCode, group = IndicatorCode)) +
ggplot(data = subset1 , aes(x=Year, y=Percentage, color=CountryCode, group = CountryCode)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
scale_y_continuous(breaks = seq(20, 100, 5))
#ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName)) + geom_point() +   xlab('Year') + ylab('% house holds economically headed by females')
#L = (ind2_data$CountryCode == 'GTM' | "URY" | "ECU") & (ind2_data$IndicatorCode == "SOC_1328")
#head(L)
subset1 <- subset(work_data, IndicatorCode == "SOC_1328" )
#& (CountryCode == 'GTM' | CountryCode == 'URY' | CountryCode == 'ECU' | CountryCode == 'PAN') )
head(subset1)
#ggplot(ind2_data[L,] , aes(x=Year, y=AggregatedValue, color=IndicatorCode, group = IndicatorCode)) +
ggplot(data = subset1 , aes(x=Year, y=Percentage, color=CountryCode, group = CountryCode)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
scale_y_continuous(breaks = seq(20, 100, 5))
typeof(work_data$AggregatedValue)
work_data$Percentage <- as.numeric(as.character(work_data$AggregatedValue))
head(work_data)
#ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName)) + geom_point() +   xlab('Year') + ylab('% house holds economically headed by females')
#L = (ind2_data$CountryCode == 'GTM' | "URY" | "ECU") & (ind2_data$IndicatorCode == "SOC_1328")
#head(L)
subset1 <- subset(work_data, IndicatorCode == "SOC_1328" )
#& (CountryCode == 'GTM' | CountryCode == 'URY' | CountryCode == 'ECU' | CountryCode == 'PAN') )
head(subset1)
#ggplot(ind2_data[L,] , aes(x=Year, y=AggregatedValue, color=IndicatorCode, group = IndicatorCode)) +
ggplot(data = subset1 , aes(x=Year, y=Percentage, color=CountryCode, group = CountryCode)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
scale_y_continuous(breaks = seq(20, 100, 5))
#+  scale_y_discrete(breaks = seq(20, 100, by = 20))
#+ scale_y_discrete(labels=comma)
#+  scale_y_discrete(breaks = seq(20, 100, by = 10))
#ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName)) + geom_point() +   xlab('Year') + ylab('% house holds economically headed by females')
#L = (ind2_data$CountryCode == 'GTM' | "URY" | "ECU") & (ind2_data$IndicatorCode == "SOC_1328")
#head(L)
subset1 <- subset(work_data, IndicatorCode == "SOC_1328" )
#& (CountryCode == 'GTM' | CountryCode == 'URY' | CountryCode == 'ECU' | CountryCode == 'PAN') )
head(subset1)
ggplot(data = subset1 , aes(x=Year, y=Percentage, color=CountryCode, group = CountryCode)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
scale_y_continuous(breaks = seq(20, 100, 5)) +
scale_x_discrete(breaks = seq(1986, 2017, 5))
#ggplot(data, aes(x=Year, y=AggregatedValue, color=CountryTableName)) + geom_point() +   xlab('Year') + ylab('% house holds economically headed by females')
#L = (ind2_data$CountryCode == 'GTM' | "URY" | "ECU") & (ind2_data$IndicatorCode == "SOC_1328")
#head(L)
subset1 <- subset(work_data, IndicatorCode == "SOC_1328" )
#& (CountryCode == 'GTM' | CountryCode == 'URY' | CountryCode == 'ECU' | CountryCode == 'PAN') )
head(subset1)
ggplot(data = subset1 , aes(x=Year, y=Percentage, color=CountryCode, group = CountryCode)) +
geom_point() +
geom_line() +
xlab('Year') +
ylab('% house holds economically headed by females') +
theme(text = element_text(size=7)) +
scale_y_continuous(breaks = seq(20, 100, 5)) +
scale_x_discrete(breaks = seq(1986, 2017, 2))
head(work_data)
max(work_data$Year)
work_data_2016 <- work_data[work_data$Year == "2016" & (work_data$IndicatorCode == "SOC_1127" | work_data$IndicatorCode =="SOC_2683"), ]
head(work_data_2016)
unique(work_data$CountryCode)
unique(work_data$IndicatorCode)
unique(work_data_2016$Year)
work_data_2016$Gender <- ifelse(work_data_2016$IndicatorCode == "SOC_1127", "Female", "Male")
head(work_data_2016)
ggplot(data=work_data_2016, aes(x=CountryCode, y=Percentage, fill=Gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#7fbf7b", "#67a9cf")) +
ggtitle('Employment rate') +
theme(plot.title = element_text(hjust = 0.5, size = 15, face = "bold")) +
xlab("Country")
data1 <- work_data[work_data$IndicatorCode == "SOC_1127" & work_data$CountryCode == 'URY',]
data2<- work_data[work_data$IndicatorCode == "SOC_2683" & work_data$CountryCode == 'URY',]
data3<- work_data[work_data$IndicatorCode == "SOC_1328" & work_data$CountryCode == 'URY',]
data4<- work_data[work_data$IndicatorCode == "SOC_686" & work_data$CountryCode == 'URY',]
head(data1)
unique(data1$CountryCode)
unique(data1$IndicatorCode)
ind_vector["SOC_1127"]
install.packages('gridExtra')
library('gridExtra')
p1 <- ggplot(data = data1 , aes(x=Year, y=Percentage, group = IndicatorCode)) + geom_point() + geom_line(color= 'blue') + ggtitle(ind_vector["SOC_1127"]) + scale_x_discrete(breaks = seq(1990, 2017, 4)) + scale_y_continuous(breaks = seq(20, 100, 5)) + ylim(c(40,100))
#+ scale_x_discrete(breaks = seq(1990, 2016, 5))
p2 <- ggplot(data = data2, aes(x=Year, y=Percentage,  group = IndicatorCode)) + geom_point() + geom_line(color= 'blue') + ggtitle(ind_vector["SOC_2683"]) + scale_x_discrete(breaks = seq(1990, 2017, 4)) + scale_y_continuous(breaks = seq(20, 100, 5)) + ylim(c(40,100))
p3 <- ggplot(data = data3 , aes(x=Year, y=Percentage, group = IndicatorCode)) + geom_point() + geom_line(color= 'blue') + ggtitle(ind_vector["SOC_1328"]) + scale_x_discrete(breaks = seq(1990, 2017, 4)) + scale_y_continuous(breaks = seq(20, 100, 5)) + ylim(c(40,100))
p4 <- ggplot(data = data4 , aes(x=Year, y=Percentage,  group = IndicatorCode)) + geom_point() + geom_line(color= 'blue') + ggtitle(ind_vector["SOC_686"]) + scale_x_discrete(breaks = seq(1990, 2017, 4)) + scale_y_continuous(breaks = seq(20, 100, 5)) + ylim(c(40,100))
grid.arrange(p1, p3, p2, p4, ncol = 2)
#ggplot(data = subset1 , aes(x=Year, y=AggregatedValue, color=CountryCode, group = CountryCode)) +
# geom_point() +
# geom_line() +
#  xlab('Year') +
#  ylab('% house holds economically he
library('ggplot2')
data(diamonds)
data?
q
?datea
?data
qplot(x = carat, y = price, data = diamonds,
xlim = c(0, quantile(diamonds$carat,0.99)),
ylim = c(0, quantile(diamonds$prince, 0.99)))+
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
#using 99 percentile
xlim(0, quantile(diamonds$carat,0.99)) +
ylim(0, quantile(diamonds$prince, 0.99)) +
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
#using 99 percentile
xlim(0, quantile(diamonds$carat,0.99)) +
ylim(0, quantile(diamonds$prince, 0.99))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
#using 99 percentile
xlim(0, quantile(diamonds$carat,0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
stat_smooth(method = 'lm') +
#using 99 percentile
xlim(0, quantile(diamonds$carat,0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set otherwise it will take too long
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
install.packages("scales")
install.packages("plyr")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set otherwise it will take too long
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
#ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set otherwise it will take too long
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
#ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels = 'internal')
install.packages("GGally")
set.seed(20022012)
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set otherwise it will take too long
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
#ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels = 'internal')
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set otherwise it will take too long
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
#ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
install.packages("memisc")
install.packages("scales")
install.packages("GGally")
install.packages("MASS")
install.packages("car")
install.packages("lattice")
install.packages("reshape")
install.packages("plyr")
#axisLabels = 'internal')
install.packages("GGally")
install.packages("scales")
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#F79420')) +
ggtitle('price (log10)') +
scale_x_log10())
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#F79420')) +
ggtitle('price (log10)') +
scale_x_log10()
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#F79420')) +
ggtitle('price (log10)') +
scale_x_log10()
library(gridExtra)
library(grid)
grid.arrange(plot1, plot2, ncol = 2)
qplot(carat, price, data = diamonds)+
scale_y_continuous(trans = log10_trans())+
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
